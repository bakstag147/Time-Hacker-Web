const API_URL = 'https://gg40e4wjm2.execute-api.eu-north-1.amazonaws.com/prod';
let currentLevel = 1;
let messages = [];
let reputation = 0;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
async function initGame() {
    try {
        const level = await fetchLevel(currentLevel);
        addStatusMessage(`–£—Ä–æ–≤–µ–Ω—å ${level.number}: ${level.title}`);
        addStatusMessage(level.description);
        addStatusMessage(level.sceneDescription);
        addAIMessage(level.initialMessage);
    } catch (error) {
        console.error('Error initializing game:', error);
        addStatusMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–≤–Ω—è');
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å —Å–µ—Ä–≤–µ—Ä–∞
async function fetchLevel(levelNumber) {
    const response = await fetch(`${API_URL}/levels`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ level: levelNumber })
    });
    
    const data = await response.json();
    return JSON.parse(data.body);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è AI
async function sendToAI(userMessage) {
    const level = await fetchLevel(currentLevel);
    
    const messages = [
        {
            role: 'system',
            content: level.systemPrompt
        },
        {
            role: 'user',
            content: userMessage
        }
    ];

    const response = await fetch(`${API_URL}/chat`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ messages })
    });

    const data = await response.json();
    return data.message;
}

// UI —Ñ—É–Ω–∫—Ü–∏–∏
function addMessage(content, isUser = false, type = 'message') {
    const messagesDiv = document.getElementById('messages');
    const messageDiv = document.createElement('div');
    
    if (type === 'status') {
        messageDiv.className = 'status-message';
    } else {
        messageDiv.className = `message ${isUser ? 'user-message' : 'ai-message'}`;
    }
    
    messageDiv.textContent = content;
    messagesDiv.appendChild(messageDiv);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

function addUserMessage(content) {
    addMessage(content, true);
}

function addAIMessage(content) {
    addMessage(content, false);
}

function addStatusMessage(content) {
    addMessage(content, false, 'status');
}

function updateReputation(value) {
    reputation = value;
    document.getElementById('reputation').textContent = reputation;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.getElementById('send-button').addEventListener('click', async () => {
    const input = document.getElementById('message-input');
    const message = input.value.trim();
    
    if (!message) return;
    
    input.value = '';
    addUserMessage(message);
    
    try {
        const response = await sendToAI(message);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
        const reputationMatch = response.match(/\*REPUTATION:(\d+)\*/);
        if (reputationMatch) {
            updateReputation(parseInt(reputationMatch[1]));
        }
        
        // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–µ—Ç–∫–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
        const cleanResponse = response.replace(/\*REPUTATION:\d+\*/, '');
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        const parts = cleanResponse.split('*');
        parts.forEach((part, index) => {
            const trimmedPart = part.trim();
            if (trimmedPart) {
                if (index % 2 === 1) {
                    addStatusMessage(trimmedPart);
                } else {
                    addAIMessage(trimmedPart);
                }
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã
        const level = await fetchLevel(currentLevel);
        if (level.victoryConditions.some(condition => response.includes(condition))) {
            addStatusMessage(level.victoryMessage);
            if (currentLevel < 10) {
                currentLevel++;
                setTimeout(() => initGame(), 2000);
            } else {
                addStatusMessage('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –∏–≥—Ä—É!');
            }
        }
    } catch (error) {
        console.error('Error:', error);
        addStatusMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
});

document.getElementById('message-input').addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        document.getElementById('send-button').click();
    }
});

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
initGame(); 