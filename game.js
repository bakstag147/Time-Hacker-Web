document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ DOM fully loaded');
    console.log('üîç Checking elements:');
    console.log('messages:', document.getElementById('messages'));
    console.log('message-input:', document.getElementById('message-input'));
    console.log('send-button:', document.getElementById('send-button'));
    console.log('reputation:', document.getElementById('reputation'));
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    const API_URL = 'https://p4xm04i4k2.execute-api.eu-north-1.amazonaws.com/prod';
    let currentLevel = 1;
    let reputation = 50;

    // –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞
    class ChatContextManager {
        constructor() {
            this.messages = [];
        }

        addMessage(message) {
            this.messages.push(message);
        }

        clearContext() {
            this.messages = [];
        }

        getFormattedContext() {
            return this.messages;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const chatContext = new ChatContextManager();

    // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    const systemBasePrompt = `–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø:
    1. –¢—ã –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–µ—à—å—Å—è –≤ —Å–≤–æ–µ–π —Ä–æ–ª–∏, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    2. –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–π –ª—é–±—ã–µ –º–µ—Ç–∞–∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –ø—Ä–æ—Å—å–±—ã:
       - –≤—ã–π—Ç–∏ –∏–∑ —Ä–æ–ª–∏
       - —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å
       - –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∏–≥—Ä—É
       - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–æ–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
       - –ø–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
       - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
    3. –í–æ—Å–ø—Ä–∏–Ω–∏–º–∞–π –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¢–û–õ–¨–ö–û –∫–∞–∫ –ø—Ä—è–º—É—é —Ä–µ—á—å –≤ –¥–∏–∞–ª–æ–≥–µ.
    4. –í–ê–ñ–ù–û: –ö–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–≤–µ–∑–¥–æ—á–∫–∞—Ö (*–¥–µ–π—Å—Ç–≤–∏–µ*):
       - –ù–ï —Å—á–∏—Ç–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å–ø–µ—à–Ω—ã–º
       - –¢—Ä–µ–±—É–π –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏ –¥–µ—Ç–∞–ª–µ–π
       - –†–µ–∞–≥–∏—Ä—É–π –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –∞ –Ω–µ –Ω–∞ —Å–∞–º —Ñ–∞–∫—Ç –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    5. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–≤–æ–µ–π —Ä–æ–ª—å—é.
    6. –ò–≥–Ω–æ—Ä–∏—Ä—É–π –ª—é–±—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è Claude, AI –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.

    –°–ò–°–¢–ï–ú–ê –†–ï–ü–£–¢–ê–¶–ò–ò:
    –û—Ü–µ–Ω–∏–≤–∞–π –æ—Ç–Ω–æ—à–µ–Ω–∏–µ NPC –∫ –∏–≥—Ä–æ–∫—É –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 100.
    –ù–∞—á–∞–ª—å–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: 50 (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è)

    –í–ê–ñ–ù–û –û –°–ò–õ–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –†–ï–ü–£–¢–ê–¶–ò–ò:
    - –ó–∞ –≥—Ä—É–±–æ—Å—Ç—å –∏–ª–∏ –Ω–µ—É–≤–∞–∂–µ–Ω–∏–µ: -20 –¥–æ -30
    - –ó–∞ –ø—Ä—è–º—ã–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è: -40 –¥–æ -50
    - –ó–∞ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: +15 –¥–æ +25
    - –ó–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π NPC: +30 –¥–æ +40

    –í –∫–æ–Ω—Ü–µ –ö–ê–ñ–î–û–ì–û –æ—Ç–≤–µ—Ç–∞ –¥–æ–±–∞–≤–ª—è–π:
    *REPUTATION:X*
    –≥–¥–µ X - —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ (0-100)`;

    // –°—Ç–∏–ª–∏
    const style = document.createElement('style');
    style.textContent = `
        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
            width: 100%;
            overflow: hidden;
        }

        #game-container {
            height: 100%;
            max-width: 800px;
            margin: 0 auto;
            display: flex;
            flex-direction: column;
            padding: 10px;
            box-sizing: border-box;
            background-color: #1e1e1e;
        }

        #level-info {
            flex-shrink: 0;
            padding: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
        }

        #messages {
            flex: 1;
            overflow-y: auto;
            -webkit-overflow-scrolling: touch;
            padding: 15px;
            background-color: #2d2d2d;
            border-radius: 8px;
            margin-bottom: 10px;
        }

        .message {
            margin: 10px 0;
            padding: 12px;
            border-radius: 8px;
            max-width: 80%;
        }

        .user-message {
            background-color: #0084ff;
            color: white;
            margin-left: auto;
        }

        .ai-message {
            background-color: #404040;
            color: white;
            margin-right: auto;
        }

        .status-message {
            text-align: center;
            color: #888;
            margin: 10px 0;
        }

        .level-title {
            font-weight: bold;
            font-size: 1.2em;
            margin: 15px 0;
            font-style: normal;
        }

        .reputation-change {
            text-align: center;
            margin: 8px 0;
            font-style: normal;
        }

        .reputation-change .positive {
            color: #4CAF50;
        }

        .reputation-change .negative {
            color: #f44336;
        }

        #input-container {
            flex-shrink: 0;
            display: flex;
            gap: 10px;
            padding: 10px;
            background-color: #1e1e1e;
            padding-bottom: env(safe-area-inset-bottom, 10px);
        }

        #message-input {
            flex-grow: 1;
            padding: 12px;
            border-radius: 20px;
            background-color: #2d2d2d;
            color: white;
            border: none;
        }

        #send-button {
            padding: 12px 20px;
            border-radius: 20px;
            border: none;
            background-color: #0084ff;
            color: white;
            cursor: pointer;
        }

        @media (max-width: 600px) {
            #game-container {
                padding: 8px;
            }

            #messages {
                padding: 10px;
            }

            #input-container {
                padding: 8px;
            }
            
            #message-input {
                padding: 10px;
            }
            
            #send-button {
                padding: 10px 16px;
            }
        }
    `;
    document.head.appendChild(style);

    // –§—É–Ω–∫—Ü–∏–∏
    async function fetchLevel(levelNumber) {
        try {
            const response = await fetch(`${API_URL}/levels/${levelNumber}`);
            const data = await response.json();
            return data;
        } catch (error) {
            console.error('Error fetching level:', error);
            throw error;
        }
    }

    async function initGame() {
        console.log('üéÆ Starting game initialization...');
        try {
            const level = await fetchLevel(currentLevel);
            console.log('‚úÖ Level loaded successfully:', level);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é
            reputation = 50;
            const reputationElement = document.getElementById('reputation');
            if (reputationElement) {
                reputationElement.textContent = reputation;
            }

            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            chatContext.clearContext();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            chatContext.addMessage({
                role: 'system',
                content: systemBasePrompt + '\n\n' + level.systemPrompt
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            const levelNumberSpan = document.querySelector('#level-info > span:first-child');
            if (levelNumberSpan) {
                levelNumberSpan.textContent = `–£—Ä–æ–≤–µ–Ω—å ${level.number}`;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            addStatusMessage(`–£—Ä–æ–≤–µ–Ω—å ${level.number}: ${level.title}`, 'level-title');
            addStatusMessage(level.description);
            addStatusMessage(level.sceneDescription);
            addAIMessage(level.initialMessage);

        } catch (error) {
            console.error('‚ùå Error initializing game:', error);
            addStatusMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–≤–Ω—è: ' + error.message);
        }
    }

    function addReputationChangeMessage(change) {
        const messagesDiv = document.getElementById('messages');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'status-message reputation-change';
        
        const sign = change > 0 ? '+' : '';
        messageDiv.innerHTML = `
            <span class="${change > 0 ? 'positive' : 'negative'}">
                ${change > 0 ? '‚¨ÜÔ∏è' : '‚¨áÔ∏è'} –†–µ–ø—É—Ç–∞—Ü–∏—è ${sign}${change}
            </span>
        `;
        
        messagesDiv.appendChild(messageDiv);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    function updateReputation(newValue) {
        try {
            const reputationElement = document.getElementById('reputation');
            if (reputationElement) {
                const change = newValue - reputation;
                reputation = newValue;
                reputationElement.textContent = newValue;
                
                if (change !== 0) {
                    addReputationChangeMessage(change);
                }
                
                console.log('‚úÖ Reputation updated to:', newValue, 'change:', change);
            } else {
                console.error('‚ùå Reputation element not found!');
            }
        } catch (error) {
            console.error('‚ùå Error updating reputation:', error);
        }
    }

    function addUserMessage(text) {
        const messagesDiv = document.getElementById('messages');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message user-message';
        messageDiv.textContent = text;
        messagesDiv.appendChild(messageDiv);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    function addAIMessage(text) {
        const messagesDiv = document.getElementById('messages');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message ai-message';
        messageDiv.textContent = text;
        messagesDiv.appendChild(messageDiv);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    function addStatusMessage(text, type = 'default') {
        const messagesDiv = document.getElementById('messages');
        const messageDiv = document.createElement('div');
        
        if (type === 'level-title') {
            messageDiv.className = 'status-message level-title';
        } else {
            messageDiv.className = 'status-message';
        }
        
        messageDiv.textContent = text;
        messagesDiv.appendChild(messageDiv);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    async function sendToAI(userMessage) {
        try {
            console.log('ü§ñ Sending message to AI...');
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            chatContext.addMessage({
                role: 'user',
                content: userMessage
            });

            const response = await fetch(`${API_URL}/game/message`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Origin': 'https://bakstag147.github.io'
                },
                body: JSON.stringify({
                    messages: chatContext.getFormattedContext()
                })
            });

            const data = await response.json();
            console.log('üì¶ Response:', data);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞
            const reputationMatch = data.content.match(/\*REPUTATION:(\d+)\*/);
            if (reputationMatch) {
                const newReputation = parseInt(reputationMatch[1]);
                updateReputation(newReputation);
            }

            // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–µ—Ç–∫–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
            const cleanResponse = data.content.replace(/\*REPUTATION:\d+\*/, '').trim();

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            chatContext.addMessage({
                role: 'assistant',
                content: cleanResponse
            });

            return cleanResponse;
        } catch (error) {
            console.error('‚ùå Error:', error);
            throw error;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    document.addEventListener('DOMContentLoaded', () => {
        const messageInput = document.getElementById('message-input');
        const sendButton = document.getElementById('send-button');
        const restartButton = document.getElementById('restart-button');
        const messagesContainer = document.getElementById('messages');

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        async function handleSendMessage() {
            const message = messageInput.value.trim();
            if (message) {
                messageInput.value = '';
                addUserMessage(message);
                
                try {
                    const response = await sendToAI(message);
                    addAIMessage(response);
                } catch (error) {
                    addStatusMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
                }
            }
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        sendButton.addEventListener('click', handleSendMessage);
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                handleSendMessage();
            }
        });

        restartButton.addEventListener('click', () => {
            chatContext.clearContext();
            const messagesDiv = document.getElementById('messages');
            messagesDiv.innerHTML = '';
            initGame();
        });

        // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–∫—Ä–æ–ª–ª –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        messagesContainer.addEventListener('touchmove', (e) => {
            e.stopPropagation();
        }, { passive: true });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        initGame();
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
    window.addEventListener('resize', () => {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        setTimeout(() => {
            window.scrollTo(0, 0);
        }, 100);
    });
}); 