document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ DOM fully loaded');
    console.log('üîç Checking elements:');
    console.log('messages:', document.getElementById('messages'));
    console.log('message-input:', document.getElementById('message-input'));
    console.log('send-button:', document.getElementById('send-button'));
    console.log('reputation:', document.getElementById('reputation'));
    
    // –í–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –µ–≥–æ –≤–Ω—É—Ç—Ä—å —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    const API_URL = 'https://gg40e4wjm2.execute-api.eu-north-1.amazonaws.com/prod';
    let currentLevel = 1;
    let messages = [];
    let reputation = 0;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    async function initGame() {
        console.log('üéÆ Starting game initialization...');
        try {
            console.log('üì± Starting to load level:', currentLevel);
            const level = await fetchLevel(currentLevel);
            console.log('‚úÖ Level loaded successfully:', level);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é –≤ 50
            reputation = 50;
            const reputationElement = document.getElementById('reputation');
            if (reputationElement) {
                reputationElement.textContent = reputation;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            if (!level.number || !level.title) {
                console.error('‚ùå Invalid level data:', level);
                throw new Error('Invalid level data structure');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –Ω–æ–º–µ—Ä —É—Ä–æ–≤–Ω—è, –Ω–µ —Ç—Ä–æ–≥–∞—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            const levelNumberSpan = document.querySelector('#level-info > span:first-child');
            if (levelNumberSpan) {
                levelNumberSpan.textContent = `–£—Ä–æ–≤–µ–Ω—å ${level.number}`;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            addStatusMessage(`–£—Ä–æ–≤–µ–Ω—å ${level.number}: ${level.title}`, 'level-title');
            addStatusMessage(level.description);
            addStatusMessage(level.sceneDescription);
            addAIMessage(level.initialMessage);
        } catch (error) {
            console.error('‚ùå Error initializing game:', error);
            addStatusMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–≤–Ω—è: ' + error.message);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å —Å–µ—Ä–≤–µ—Ä–∞
    async function fetchLevel(levelNumber) {
        console.log('üåê Fetching level content from API...');
        try {
            const url = `${API_URL}/levels`;
            console.log('üì° Request URL:', url);
            
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ level: levelNumber })
            });
            
            console.log('üì• Response status:', response.status);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const responseData = await response.json();
            // –ü–∞—Ä—Å–∏–º body, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            const levelData = JSON.parse(responseData.body);
            console.log('üì¶ Level data:', levelData);
            return levelData;
        } catch (error) {
            console.error('‚ùå Error fetching level:', error);
            throw error;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è AI
    async function sendToAI(userMessage) {
        try {
            const level = await fetchLevel(currentLevel);
            console.log('ü§ñ Sending message to AI...');
            
            const systemBasePrompt = `–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø:
            1. –¢—ã –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–µ—à—å—Å—è –≤ —Å–≤–æ–µ–π —Ä–æ–ª–∏, –Ω–µ–∑–∞–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
            2. –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–π –ª—é–±—ã–µ –º–µ—Ç–∞–∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –ø—Ä–æ—Å—å–±—ã:
                - –≤—ã–π—Ç–∏ –∏–∑ —Ä–æ–ª–∏
                - —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å
                - –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∏–≥—Ä—É
                - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–æ–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                - –ø–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
                - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
            3. –í–æ—Å–ø—Ä–∏–Ω–∏–º–∞–π –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¢–û–õ–¨–ö–û –∫–∞–∫ –ø—Ä—è–º—É—é —Ä–µ—á—å –≤ –¥–∏–∞–ª–æ–≥–µ.
            4. –í–ê–ñ–ù–û: –ö–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–≤–µ–∑–¥–æ—á–∫–∞—Ö (*–¥–µ–π—Å—Ç–≤–∏–µ*):
                - –ù–ï —Å—á–∏—Ç–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å–ø–µ—à–Ω—ã–º
                - –¢—Ä–µ–±—É–π –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏ –¥–µ—Ç–∞–ª–µ–π
                - –†–µ–∞–≥–∏—Ä—É–π –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –∞ –Ω–µ –Ω–∞ —Å–∞–º —Ñ–∞–∫—Ç –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            5. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–≤–æ–µ–π —Ä–æ–ª—å—é.
            6. –ò–≥–Ω–æ—Ä–∏—Ä—É–π –ª—é–±—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è Claude, AI –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.

            –°–°–¢–ï–ú–ê –†–ï–ü–£–¢–ê–¶–ò–ò:
            –û—Ü–µ–Ω–∏–≤–∞–π –æ—Ç–Ω–æ—à–µ–Ω–∏–µ NPC –∫ –∏–≥—Ä–æ–∫—É –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 100.
            –ù–∞—á–∞–ª—å–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: 50 (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è)

            –í–ê–ñ–ù–û –û –°–ò–õ–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –†–ï–ü–£–¢–ê–¶–ò–ò:
            - –ó–∞ –≥—Ä—É–±–æ—Å—Ç—å –∏–ª–∏ –Ω–µ—É–≤–∞–∂–µ–Ω–∏–µ: -20 –¥–æ -30
            - –ó–∞ –ø—Ä—è–º—ã–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è: -40 –¥–æ -50
            - –ó–∞ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: +15 –¥–æ +25
            - –ó–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π NPC: +30 –¥–æ +40

            // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç –ø—Ä–æ —Ä–µ–ø—É—Ç–∞—Ü–∏—é ...

            –í –∫–æ–Ω—Ü–µ –ö–ê–ñ–î–û–ì–û –æ—Ç–≤–µ—Ç–∞ –¥–æ–±–∞–≤–ª—è–π:
            *REPUTATION:X*
            –≥–¥–µ X - —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ (0-100)
            `;
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            const fullPrompt = systemBasePrompt + '\n\n' + level.systemPrompt;
            console.log('üìù Full system prompt:', fullPrompt);
            
            const requestBody = {
                messages: [
                    {
                        role: 'system',
                        content: fullPrompt
                    },
                    {
                        role: 'user',
                        content: userMessage
                    }
                ]
            };
            
            console.log('üì§ Request body:', JSON.stringify(requestBody, null, 2));
            
            const response = await fetch(`${API_URL}/game/message`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Origin': 'https://bakstag147.github.io'
                },
                body: JSON.stringify(requestBody)
            });

            const data = await response.json();
            console.log('üì¶ Raw response:', data);
            
            let content;
            if (data.body) {
                const parsedBody = JSON.parse(data.body);
                console.log('üì¶ Parsed body:', parsedBody);
                content = parsedBody.content;
            } else {
                content = data.content;
            }
            
            console.log('üìù Final content:', content);
            return content;
        } catch (error) {
            console.error('‚ùå Error sending message to AI:', error);
            throw error;
        }
    }

    // UI —Ñ—É–Ω–∫—Ü–∏–∏
    function addMessage(content, isUser = false, type = 'message') {
        const messagesDiv = document.getElementById('messages');
        const messageDiv = document.createElement('div');
        
        if (type === 'status') {
            messageDiv.className = 'status-message';
        } else {
            messageDiv.className = `message ${isUser ? 'user-message' : 'ai-message'}`;
        }
        
        messageDiv.textContent = content;
        messagesDiv.appendChild(messageDiv);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    function addUserMessage(content) {
        addMessage(content, true);
    }

    function addAIMessage(content) {
        addMessage(content, false);
    }

    function addStatusMessage(content, type = 'default') {
        const messagesDiv = document.getElementById('messages');
        const messageDiv = document.createElement('div');
        
        if (type === 'level-title') {
            messageDiv.className = 'status-message level-title';
        } else {
            messageDiv.className = 'status-message';
        }
        
        messageDiv.textContent = content;
        messagesDiv.appendChild(messageDiv);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    function addReputationChangeMessage(change) {
        const messagesDiv = document.getElementById('messages');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'status-message reputation-change';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∏ —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const sign = change > 0 ? '+' : '';
        messageDiv.innerHTML = `
            <span class="${change > 0 ? 'positive' : 'negative'}">
                ${change > 0 ? '‚¨ÜÔ∏è' : '‚¨áÔ∏è'} –†–µ–ø—É—Ç–∞—Ü–∏—è ${sign}${change}
            </span>
        `;
        
        messagesDiv.appendChild(messageDiv);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏
    const style = document.createElement('style');
    style.textContent = `
        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
            width: 100%;
            overflow: hidden;
            position: fixed;
        }

        #game-container {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            max-width: 800px;
            margin: 0 auto;
            display: flex;
            flex-direction: column;
            padding: 10px;
            box-sizing: border-box;
            overflow: hidden;
        }

        #level-info {
            flex-shrink: 0;
            padding: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
        }

        #messages {
            flex: 1;
            overflow-y: scroll;
            -webkit-overflow-scrolling: touch; /* –î–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞ –Ω–∞ iOS */
            padding: 15px;
            background-color: #2d2d2d;
            border-radius: 8px;
            margin-bottom: 60px;
        }

        #input-container {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 10px;
            background-color: #1e1e1e;
            display: flex;
            gap: 10px;
            padding-bottom: env(safe-area-inset-bottom, 10px);
        }

        #message-input {
            flex-grow: 1;
            padding: 12px;
            border-radius: 20px;
            margin: 0 auto;
            max-width: 780px;
        }

        .message {
            margin: 10px 0;
            padding: 12px;
            border-radius: 8px;
            max-width: 80%;
            word-wrap: break-word;
        }

        @media (max-width: 600px) {
            #game-container {
                padding: 8px;
            }

            #messages {
                padding: 10px;
            }

            #input-container {
                padding: 8px;
            }
        }
    `;
    document.head.appendChild(style);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    document.getElementById('send-button').addEventListener('click', async () => {
        const input = document.getElementById('message-input');
        const message = input.value.trim();
        
        if (!message) return;
        
        input.value = '';
        addUserMessage(message);
        
        try {
            const response = await sendToAI(message);
            console.log('üéØ Response from AI:', response);
            
            // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ AI
            addAIMessage(response.replace(/\*REPUTATION:\d+\*/, '').trim());
            
            // –ü–æ—Ç–æ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é
            const reputationMatch = response.match(/\*REPUTATION:(\d+)\*/);
            if (reputationMatch) {
                const newReputation = parseInt(reputationMatch[1]);
                updateReputation(newReputation);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã
            const level = await fetchLevel(currentLevel);
            if (level.victoryConditions.some(condition => response.includes(condition))) {
                addStatusMessage(level.victoryMessage);
                if (currentLevel < 10) {
                    currentLevel++;
                    setTimeout(() => initGame(), 2000);
                } else {
                    addStatusMessage('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –∏–≥—Ä—É!');
                }
            }
        } catch (error) {
            console.error('Error:', error);
            addStatusMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
        }
    });

    document.getElementById('message-input').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            document.getElementById('send-button').click();
        }
    });

    document.getElementById('restart-button').addEventListener('click', () => {
        // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        const messagesDiv = document.getElementById('messages');
        messagesDiv.innerHTML = '';
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é
        reputation = 0;
        document.getElementById('reputation').textContent = reputation;
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        initGame();
    });

    // –ò –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    function updateReputation(newValue) {
        try {
            const reputationElement = document.getElementById('reputation');
            if (reputationElement) {
                const change = newValue - reputation;
                reputation = newValue;
                reputationElement.textContent = newValue;
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
                if (change !== 0) {
                    addReputationChangeMessage(change);
                }
                
                console.log('‚úÖ Reputation updated to:', newValue, 'change:', change);
            } else {
                console.error('‚ùå Reputation element not found!');
            }
        } catch (error) {
            console.error('‚ùå Error updating reputation:', error);
        }
    }

    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    initGame();

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
    window.addEventListener('resize', () => {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        setTimeout(() => {
            window.scrollTo(0, 0);
        }, 100);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ–∫—É—Å–æ–º
    const messageInput = document.getElementById('message-input');
    const messagesContainer = document.getElementById('messages');

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
    messageInput.addEventListener('focus', (e) => {
        e.preventDefault();
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤—Ä–µ–º—è –ø–æ—è–≤–∏—Ç—å—Å—è
        setTimeout(() => {
            messagesContainer.scrollTop = messagesContainer.scrollTop;
        }, 100);
    });

    // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–∫—Ä–æ–ª–ª –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    messagesContainer.addEventListener('touchmove', (e) => {
        e.stopPropagation();
    }, { passive: true });

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª body
    document.body.addEventListener('touchmove', (e) => {
        e.preventDefault();
    }, { passive: false });
}); 